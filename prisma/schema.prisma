// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String      @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  sizes       Size[]      @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
  customers   Customer[]  @relation("StoreToCustomer")
  createdAt   DateTime    @default(now()) 
  updatedAt   DateTime    @updatedAt
}

model Billboard {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime  @default(now()) 
  updatedAt   DateTime  @updatedAt

  @@index([storeId]) 
}

model Category {
  id            String    @id @default(uuid())
  storeId       String
  store         Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  name          String
  billboardId   String
  billboard     Billboard @relation(fields: [billboardId], references: [id])
  products      Product[] @relation("CategoryToProduct")
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt
 
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id            String    @id @default(uuid())
  storeId       String
  store         Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name          String 
  value         String 
  products      Product[]
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt
 
  @@index([storeId])
}

model Color {
  id            String    @id @default(uuid())
  storeId       String
  store         Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name          String
  value         String
  products      Product[]
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt
 
  @@index([storeId])
}

model Product {
  id            String    @id @default(uuid())
  storeId       String
  store         Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String
  category      Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String
  description   String
  price         Decimal
  isFeatured    Boolean   @default(false)
  isArchived    Boolean   @default(false)
  sizeId        String
  size          Size      @relation(fields: [sizeId], references: [id])
  colorId       String
  color         Color     @relation(fields: [colorId], references: [id])
  images        Image[]
  reviews       Review[]
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt
 
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id            String    @id @default(uuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url           String
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt

  @@index([productId])
}

model Order {
    id            String    @id @default(uuid())
    storeId       String
    store         Store     @relation("StoreToOrder", fields: [storeId], references: [id])
    orderItems    OrderItem[]
    isPaid        Boolean   @default(false)
    phone         String    @default("")
    address       String    @default("Not Set")
    createdAt     DateTime  @default(now()) 
    updatedAt     DateTime  @updatedAt
    
    
    @@index([storeId])
}

model OrderItem {
    id            String    @id @default(uuid())
    orderId       String
    order         Order     @relation(fields: [orderId], references: [id])
    productId     String
    product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([orderId])
    @@index([productId])
}

model Customer {
  id                         String    @id @default(uuid())
  username                   String    @unique
  email                      String    @unique
  password                   String
  storeId                    String
  store                      Store     @relation("StoreToCustomer", fields: [storeId], references: [id])
  reviews                    Review[]
  isVerified                 Boolean   @default(false)
  forgotPasswordToken        String?   
  forgotPasswordTokenExpiry  DateTime? 
  verifyToken                String?   
  verifyTokenExpiry          DateTime? 
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model Review {
  id            String    @id @default(cuid())
  rating        Int
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  comment       String
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  // images     Image[]
  createdAt     DateTime  @default(now())
}