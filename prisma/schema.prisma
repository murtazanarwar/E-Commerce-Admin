generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  customers  Customer[]  @relation("StoreToCustomer")
  coupons    Coupon[]  @relation("StoreToCoupon")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[] @relation("BillboardToCategory")

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  name        String
  billboardId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
} 

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[] @relation("SizeToProduct")

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  categoryId  String
  name        String
  description String
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  colorId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size        Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  color       Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  images      Image[]
  reviews     Review[]
  orderItems  OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id                  String      @id @default(uuid())
  storeId             String
  isPaid              Boolean     @default(false)
  phone               String      @default("")
  address             String      @default("Not Set")
  razorpayOrderId     String?
  razorpayPaymentId   String?
  couponId            String?
  customerId          String
  paidAt              DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  store               Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  customer            Customer    @relation("CustomerToOrder", fields: [customerId], references: [id])
  coupon              Coupon?     @relation(fields: [couponId], references: [id])
  orderItems          OrderItem[]

  @@index([storeId])
  @@index([couponId])
  @@index([customerId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Customer {
  id                        String    @id @default(uuid())
  username                  String    
  email                     String    
  password                  String
  storeId                   String
  isVerified                Boolean   @default(false)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  store                     Store     @relation("StoreToCustomer", fields: [storeId], references: [id])
  reviews                   Review[]  @relation("CustomerToReview")
  orders                    Order[]  @relation("CustomerToOrder")
  loyaltyPoints             LoyaltyPoint[]
  couponUsages              CouponUsage[]
  
  @@unique([email, storeId])
  @@index([storeId])
}

model Review {
  id         String        @id @default(cuid())
  rating     Int
  productId  String
  comment    String
  customerId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  product    Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer   Customer      @relation("CustomerToReview", fields: [customerId], references: [id])
  images     ReviewImage[]

  @@index([productId])
  @@index([customerId])
}

model ReviewImage {
  id        String   @id @default(uuid())
  reviewId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model Coupon {
  id             String   @id @default(cuid())
  code           String
  storeId        String
  discountType   String   // "PERCENTAGE" or "FIXED"
  discountValue  Float
  minCartValue   Float?
  expiresAt      DateTime?
  usageLimit     Int?
  usedCount      Int      @default(0)
  userUsages     CouponUsage[]
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  store          Store    @relation("StoreToCoupon", fields: [storeId], references: [id])
  orders         Order[]
  @@unique([code, storeId])
  @@index([storeId])
}

model CouponUsage {
  id         String   @id @default(cuid())
  customerId String
  couponId   String
  usedAt     DateTime @default(now())
  
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  @@index([customerId])
  @@index([couponId]) 
}

model LoyaltyPoint {
  id         String   @id @default(cuid())
  customerId String   @unique
  points     Int
  expiresAt  DateTime?
  createdAt  DateTime @default(now())

  customer   Customer @relation(fields: [customerId], references: [id])
  @@index([customerId])
}
